// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Column defines model for Column.
type Column struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// Progress defines model for Progress.
type Progress struct {
	Bytes     *int64 `json:"bytes,omitempty"`
	Elapsed   *int64 `json:"elapsed,omitempty"`
	Rows      *int64 `json:"rows,omitempty"`
	TotalRows *int64 `json:"total_rows,omitempty"`
}

// ProgressEvent defines model for ProgressEvent.
type ProgressEvent struct {
	Progress *Progress `json:"progress,omitempty"`
}

// Result defines model for Result.
type Result struct {
	Data *[]map[string]interface{} `json:"data,omitempty"`
	Meta *[]Column                 `json:"meta,omitempty"`
	Rows *int64                    `json:"rows,omitempty"`
}

// ResultEvent defines model for ResultEvent.
type ResultEvent struct {
	Data  *[]map[string]interface{} `json:"data,omitempty"`
	Error *string                   `json:"error,omitempty"`
	Meta  *[]Column                 `json:"meta,omitempty"`
	Rows  *int64                    `json:"rows,omitempty"`
}

// Authorization defines model for Authorization.
type Authorization = string

// QuotaKey defines model for QuotaKey.
type QuotaKey = string

// Stream defines model for Stream.
type Stream = bool

// Tier defines model for Tier.
type Tier = string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6STz44TMQzG38VwHFQOiENuCHHiwPLntloht+O2hiROHQ9oWM27o2Rmu6s2LStxa+zP",
	"P9tfPfewkZAkUrQM7h4SKgYy0vp6N9helP+gscQS4AgO9oQ9KXQQMRC4E1UHebOngEVuYyqCbMpxB9PU",
	"wedBDD/SeIQdBtLxkXUo+Vc/afwH56spYbhEyXO2gViLeMJYGd+Y9BLBuG54eYTpIVmNei9+CNWhpJJI",
	"janGZ9pZdbcEWpspHQZW6sHdzuWL+O6hCGT9gzZWKDcqO6WczxuvR5t/bEUDGjjgaG/fwBHC0WhHWijk",
	"MeXSsKEOHDkMAdzrVqXK7+c2MTH0359dMF3Z9sMvina+cnpixkulLTh4sXq87tXyd62OpjWbfKE8+Aa9",
	"R6t3wEahBrDvuRw8+punwhZzCaAqjuUd6IR1bdzltBqY/zJz3vNoJXr/aQvu9vosizlTd+oOqYq27/mk",
	"8139dDhuBVwcvO9AEkVMDA6gg4S2z3Nm+hsAAP//VEjUqJwEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
