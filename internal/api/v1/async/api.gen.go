//go:build go1.22

// Package async provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package async

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/agnosticeng/agp/internal/api/v1"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	SecretScopes = "Secret.Scopes"
)

// Defines values for ExecutionStatus.
const (
	CANCELED  ExecutionStatus = "CANCELED"
	FAILED    ExecutionStatus = "FAILED"
	PENDING   ExecutionStatus = "PENDING"
	RUNNING   ExecutionStatus = "RUNNING"
	SUCCEEDED ExecutionStatus = "SUCCEEDED"
)

// Defines values for SortBy.
const (
	COMPLETEDAT SortBy = "COMPLETED_AT"
	CREATEDAT   SortBy = "CREATED_AT"
)

// Execution defines model for Execution.
type Execution struct {
	CompletedAt *time.Time             `json:"completed_at,omitempty"`
	CreatedAt   time.Time              `json:"created_at"`
	Error       *string                `json:"error,omitempty"`
	Id          int64                  `json:"id"`
	PickedAt    *time.Time             `json:"picked_at,omitempty"`
	Progress    *externalRef0.Progress `json:"progress,omitempty"`
	Query       string                 `json:"query"`
	QueryHash   string                 `json:"query_hash"`
	QueryId     string                 `json:"query_id"`
	Result      *ResultMetadata        `json:"result,omitempty"`
	Status      ExecutionStatus        `json:"status"`
}

// ExecutionStatus defines model for ExecutionStatus.
type ExecutionStatus string

// Query defines model for Query.
type Query struct {
	Secrets *[]Secret `json:"secrets,omitempty"`
	Sql     string    `json:"sql"`
}

// ResultMetadata defines model for ResultMetadata.
type ResultMetadata struct {
	Duration *int64                 `json:"duration,omitempty"`
	Meta     *[]externalRef0.Column `json:"meta,omitempty"`
	Rows     *int64                 `json:"rows,omitempty"`
}

// SearchQuery defines model for SearchQuery.
type SearchQuery = []SearchQueryItem

// SearchQueryItem defines model for SearchQueryItem.
type SearchQueryItem struct {
	Limit     *int32             `json:"limit,omitempty"`
	QueryHash *string            `json:"query_hash,omitempty"`
	QueryId   string             `json:"query_id"`
	SortBy    *SortBy            `json:"sort_by,omitempty"`
	Statuses  *[]ExecutionStatus `json:"statuses,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult = [][]Execution

// Secret defines model for Secret.
type Secret struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// SortBy defines model for SortBy.
type SortBy string

// ExecutionId defines model for ExecutionId.
type ExecutionId = int64

// Expiration defines model for Expiration.
type Expiration = int64

// QueryId defines model for QueryId.
type QueryId = string

// Signature defines model for Signature.
type Signature = string

// PostExecutionsTextBody defines parameters for PostExecutions.
type PostExecutionsTextBody = string

// PostExecutionsParams defines parameters for PostExecutions.
type PostExecutionsParams struct {
	QueryId *QueryId `form:"query-id,omitempty" json:"query-id,omitempty"`
}

// GetExecutionsExecutionIdResultParams defines parameters for GetExecutionsExecutionIdResult.
type GetExecutionsExecutionIdResultParams struct {
	Tier       *externalRef0.Tier     `form:"tier,omitempty" json:"tier,omitempty"`
	QuotaKey   *externalRef0.QuotaKey `form:"quota_key,omitempty" json:"quota_key,omitempty"`
	Signature  Signature              `form:"signature" json:"signature"`
	Expiration Expiration             `form:"expiration" json:"expiration"`
}

// PostExecutionsJSONRequestBody defines body for PostExecutions for application/json ContentType.
type PostExecutionsJSONRequestBody = Query

// PostExecutionsTextRequestBody defines body for PostExecutions for text/plain ContentType.
type PostExecutionsTextRequestBody = PostExecutionsTextBody

// PostSearchJSONRequestBody defines body for PostSearch for application/json ContentType.
type PostSearchJSONRequestBody = SearchQuery

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /executions)
	PostExecutions(w http.ResponseWriter, r *http.Request, params PostExecutionsParams)

	// (GET /executions/{execution_id})
	GetExecutionsExecutionId(w http.ResponseWriter, r *http.Request, executionId ExecutionId)

	// (GET /executions/{execution_id}/result)
	GetExecutionsExecutionIdResult(w http.ResponseWriter, r *http.Request, executionId ExecutionId, params GetExecutionsExecutionIdResultParams)

	// (POST /search)
	PostSearch(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostExecutions operation middleware
func (siw *ServerInterfaceWrapper) PostExecutions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostExecutionsParams

	// ------------- Optional query parameter "query-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "query-id", r.URL.Query(), &params.QueryId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostExecutions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExecutionsExecutionId operation middleware
func (siw *ServerInterfaceWrapper) GetExecutionsExecutionId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "execution_id" -------------
	var executionId ExecutionId

	err = runtime.BindStyledParameterWithOptions("simple", "execution_id", r.PathValue("execution_id"), &executionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "execution_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExecutionsExecutionId(w, r, executionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExecutionsExecutionIdResult operation middleware
func (siw *ServerInterfaceWrapper) GetExecutionsExecutionIdResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "execution_id" -------------
	var executionId ExecutionId

	err = runtime.BindStyledParameterWithOptions("simple", "execution_id", r.PathValue("execution_id"), &executionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "execution_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExecutionsExecutionIdResultParams

	// ------------- Optional query parameter "tier" -------------

	err = runtime.BindQueryParameter("form", true, false, "tier", r.URL.Query(), &params.Tier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tier", Err: err})
		return
	}

	// ------------- Optional query parameter "quota_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "quota_key", r.URL.Query(), &params.QuotaKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quota_key", Err: err})
		return
	}

	// ------------- Required query parameter "signature" -------------

	if paramValue := r.URL.Query().Get("signature"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "signature"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "signature", r.URL.Query(), &params.Signature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "signature", Err: err})
		return
	}

	// ------------- Required query parameter "expiration" -------------

	if paramValue := r.URL.Query().Get("expiration"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "expiration"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "expiration", r.URL.Query(), &params.Expiration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expiration", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExecutionsExecutionIdResult(w, r, executionId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSearch operation middleware
func (siw *ServerInterfaceWrapper) PostSearch(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSearch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/executions", wrapper.PostExecutions)
	m.HandleFunc("GET "+options.BaseURL+"/executions/{execution_id}", wrapper.GetExecutionsExecutionId)
	m.HandleFunc("GET "+options.BaseURL+"/executions/{execution_id}/result", wrapper.GetExecutionsExecutionIdResult)
	m.HandleFunc("POST "+options.BaseURL+"/search", wrapper.PostSearch)

	return m
}

type PostExecutionsRequestObject struct {
	Params   PostExecutionsParams
	JSONBody *PostExecutionsJSONRequestBody
	TextBody *PostExecutionsTextRequestBody
}

type PostExecutionsResponseObject interface {
	VisitPostExecutionsResponse(w http.ResponseWriter) error
}

type PostExecutions201JSONResponse Execution

func (response PostExecutions201JSONResponse) VisitPostExecutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetExecutionsExecutionIdRequestObject struct {
	ExecutionId ExecutionId `json:"execution_id"`
}

type GetExecutionsExecutionIdResponseObject interface {
	VisitGetExecutionsExecutionIdResponse(w http.ResponseWriter) error
}

type GetExecutionsExecutionId200JSONResponse Execution

func (response GetExecutionsExecutionId200JSONResponse) VisitGetExecutionsExecutionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExecutionsExecutionId404Response struct {
}

func (response GetExecutionsExecutionId404Response) VisitGetExecutionsExecutionIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetExecutionsExecutionIdResultRequestObject struct {
	ExecutionId ExecutionId `json:"execution_id"`
	Params      GetExecutionsExecutionIdResultParams
}

type GetExecutionsExecutionIdResultResponseObject interface {
	VisitGetExecutionsExecutionIdResultResponse(w http.ResponseWriter) error
}

type GetExecutionsExecutionIdResult200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetExecutionsExecutionIdResult200ApplicationoctetStreamResponse) VisitGetExecutionsExecutionIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetExecutionsExecutionIdResult404Response struct {
}

func (response GetExecutionsExecutionIdResult404Response) VisitGetExecutionsExecutionIdResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostSearchRequestObject struct {
	Body *PostSearchJSONRequestBody
}

type PostSearchResponseObject interface {
	VisitPostSearchResponse(w http.ResponseWriter) error
}

type PostSearch200JSONResponse SearchResult

func (response PostSearch200JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /executions)
	PostExecutions(ctx context.Context, request PostExecutionsRequestObject) (PostExecutionsResponseObject, error)

	// (GET /executions/{execution_id})
	GetExecutionsExecutionId(ctx context.Context, request GetExecutionsExecutionIdRequestObject) (GetExecutionsExecutionIdResponseObject, error)

	// (GET /executions/{execution_id}/result)
	GetExecutionsExecutionIdResult(ctx context.Context, request GetExecutionsExecutionIdResultRequestObject) (GetExecutionsExecutionIdResultResponseObject, error)

	// (POST /search)
	PostSearch(ctx context.Context, request PostSearchRequestObject) (PostSearchResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostExecutions operation middleware
func (sh *strictHandler) PostExecutions(w http.ResponseWriter, r *http.Request, params PostExecutionsParams) {
	var request PostExecutionsRequestObject

	request.Params = params
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body PostExecutionsJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "text/plain") {
		data, err := io.ReadAll(r.Body)
		if err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
			return
		}
		body := PostExecutionsTextRequestBody(data)
		request.TextBody = &body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostExecutions(ctx, request.(PostExecutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExecutions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostExecutionsResponseObject); ok {
		if err := validResponse.VisitPostExecutionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExecutionsExecutionId operation middleware
func (sh *strictHandler) GetExecutionsExecutionId(w http.ResponseWriter, r *http.Request, executionId ExecutionId) {
	var request GetExecutionsExecutionIdRequestObject

	request.ExecutionId = executionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExecutionsExecutionId(ctx, request.(GetExecutionsExecutionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExecutionsExecutionId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExecutionsExecutionIdResponseObject); ok {
		if err := validResponse.VisitGetExecutionsExecutionIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExecutionsExecutionIdResult operation middleware
func (sh *strictHandler) GetExecutionsExecutionIdResult(w http.ResponseWriter, r *http.Request, executionId ExecutionId, params GetExecutionsExecutionIdResultParams) {
	var request GetExecutionsExecutionIdResultRequestObject

	request.ExecutionId = executionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExecutionsExecutionIdResult(ctx, request.(GetExecutionsExecutionIdResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExecutionsExecutionIdResult")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExecutionsExecutionIdResultResponseObject); ok {
		if err := validResponse.VisitGetExecutionsExecutionIdResultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSearch operation middleware
func (sh *strictHandler) PostSearch(w http.ResponseWriter, r *http.Request) {
	var request PostSearchRequestObject

	var body PostSearchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearch(ctx, request.(PostSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSearchResponseObject); ok {
		if err := validResponse.VisitPostSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXXU/jOBf+K+i872UgZUB70bvSZkfVznQLZa5QVZnk0HpI4mCfsEQo/31lO803bSpm",
	"pOWqwcfn43nOeWy/gy+iRMQYk4LxOyRMsggJpfny3tBPiYt4HuhPHsMYEkY7cCBmEcIYcG+x4QE4IPEl",
	"5RIDGJNM0QHl7zBieu+TkBEjGAOP6Y9rcICyBO0nblFCnjvgvSVcMu2tjPaSoszq4UqLzwa71Z5rdbUi",
	"mc9zU1Tlt3CjSPJ4a7ys+DZmlEr8yI8qDQ4l3HXsiygS8eY2FcT+wuzjNAWxzTNmMMjdPUf5kSvSa4e8",
	"5PvFZm+YtpEiQUkczZJuqRAJg40moUZHwAjPiUdYUbL37oAvkZ26B6UUsidXB3gwqBEcSLj/fGLURIqt",
	"RGVq/b/EJxjD/9xqjtwCJbcAfbk3z50C876Ezcpmx9TuwLKtqrMoUaUhHUvnzlh9R2IBI6b3KWKUHi2j",
	"ZHplzfO83soPYIakzK9RSYNVp+y4Iu66xFY8/kSfwGhAM9j4HTBOIx1n6S1m88VXcODux2Jhf00ni6n3",
	"zZuBA39O5vbH6sd06nkzb1YLUGF1u2eg2bMKfYlWAzlhdBSUlbHXDosITEqWGVBfwv4ZrGOmjfrKb3HU",
	"STNIK4Ec0NwRWieDSiradSrCNIr7KpPiHzVUXjuVrZBJf1eiPxDkcs+cMOrLqW3SQSzkETejEeATM1Ny",
	"5TQquPrSC91n5lEJSZvH7Gh5QtJNVg1iQfE+z4daJ5ftvXaGQdcZ2jZ0rYYs61l/yN1dqTJlBqel0sdf",
	"l08zVx0an7FfNl9ZmOLxebMnpDXurdBSUVOb6Z03ufdmm8m9lpm/vy+/ecVnn6o0Z6eTvT1ie9K3/ziW",
	"vdleGPdl3z5oOvEfM0I1UDMwZInC/uMz4jGPND6jvp2D9cEBEsTCzacEpSi66sqWUrKW9LEg4LoLWbis",
	"G/a5bjflf0ZGtVSgn0pO2UqHs6VWM2Ny0BtumOJ+5XJHlNgbHI+fhGk4TqFemWxjoYj7Z0sp3rKzicpi",
	"/2yynOtpQanMUQOXF6OLkU5dJBizhMMYri5GF1o49XPAJOGWTwHbf0KZjDTSbP+EgKVQ5FV2TuO98dCP",
	"a2Xi7u/s+drOByq6EUFm75wxYWxCsiQJuW+Cuj+VPSurW+0h6uzpZHDHN3KTkPHW7p47cfNWb29jiYgL",
	"Nf8yuvxl6dWE1P45ddTd9/pjLNfOttjDwVesUVB/4Z3KRn2vZaRR9+g31e3A9ehaD+4RANzqVnwSDoWg",
	"nIpG/YWVO0PNy/fdgC0NvI+bV0/TQb7Lh/WJVAqfkM4VSWTRcEqb4t2ktdI4jXu+NjQrcwU5rCz2mgK/",
	"Rxvq99dBcz/6xaFrWFm86iiVZ8DDWvOnUL7u+zaVIYzBfb10mRZ3yNf5vwEAAP//v91ymPYRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
